<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xmlns:mvc="http://www.springframework.org/schema/mvc"  xmlns:websocket="http://www.springframework.org/schema/websocket"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/redis
        http://www.springframework.org/schema/redis/spring-redis.xsd
        http://www.springframework.org/schema/mvc
     	http://www.springframework.org/schema/mvc/spring-mvc.xsd
     	http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <context:annotation-config/>
    <beans:import resource="/${source}/spring/database/context-db.xml" />
	<beans:import resource="/${source}/spring/database/context-tx.xml" />
	<beans:import resource="/${source}/spring/database/context-dao.xml" />
	<beans:import resource="/${source}/spring/sm-context.xml" />

    <!-- 配置由spring扫描的注解 -->
    <context:component-scan base-package="com.web.*"  use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer" class="com.web.util.CustomizedPropertyConfigurer">
        <property name="locations">
           <list>
              <!-- 这里支持多种寻址方式：classpath和file -->
              <value>classpath:/${source}/spring/redis.properties</value>
              <value>classpath:/${source}/spring/spring.properties</value>
              <value>classpath:/${source}/oc-ca.properties</value>
            </list>
        </property>
    </bean>

	<!-- 配置国际化资源文件路径 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/i18n/messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<bean id="MessageSourceHelper" class="com.web.util.MessageSourceHelper">
	    <property name="messageSource">
	         <ref bean="messageSource"/>
	    </property>
	</bean>

	<!-- 基于Session的本地化解析器 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>

	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer">
    </bean>

 	<!-- Redis缓存配置 & session共享-->
	<bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<!--超时时间,默认1800秒-->
	    <property name="maxInactiveIntervalInSeconds" value="1800" />
	</bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="minIdle" value="${redis.minIdle}" />
        <!-- 每次释放连接的最大数目 -->
        <property name="numTestsPerEvictionRun" value="1024" />
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!-- 连接最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="10000" />
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="1500" />
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!-- 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="true" />
        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="false" />

	</bean>

    <bean id="jedisClientConfigBuild" class="com.web.factory.JedisClientConfigBuild">
        <constructor-arg name="backend"  value="${redis.backend}"/>
        <constructor-arg name="url"  value="${redis.url}"/>
        <constructor-arg name="jedisPoolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="password" value="${redis.test.pass}"/>
    </bean>
    
    <bean id="jedisConnectionFactory" factory-bean="jedisClientConfigBuild" factory-method="build">
    </bean>
    
    <!--redisTemplate-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory" p:keySerializer-ref="stringRedisSerializer"
          p:hashKeySerializer-ref="stringRedisSerializer">
    </bean>
    
    <util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"/>
    <!-- redis集群配置 结束 -->

    <!--restTemplate-->
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate"></bean>
</beans>
